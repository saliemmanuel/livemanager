name: Deploy to VPS Hostinger

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python manage.py test
      env:
        DJANGO_SETTINGS_MODULE: livemanager.settings
    
    - name: Check code formatting
      run: |
        pip install black flake8
        black --check .
        flake8 .

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY  }}
        port: ${{ secrets.VPS_PORT }}  
        script: |
          # Variables
          PROJECT_DIR="/var/www/livemanager"
          BACKUP_DIR="/var/backups/livemanager"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          
          # Créer les répertoires si ils n'existent pas
          sudo mkdir -p $PROJECT_DIR
          sudo mkdir -p $BACKUP_DIR
          
          # Aller dans le répertoire du projet
          cd $PROJECT_DIR
          
          # Arrêter les services si ils tournent
          sudo systemctl stop livemanager || true
          sudo systemctl stop livemanager-celery || true
          
          # Vérifier si c'est un repository Git existant
          if [ -d ".git" ]; then
            echo "Repository Git existant détecté - Mise à jour..."
            
            # Sauvegarder les fichiers sensibles
            if [ -f ".env" ]; then
              sudo cp .env /tmp/livemanager_env_backup
              echo "Fichier .env sauvegardé"
            fi
            
            # Sauvegarder les médias si ils existent
            if [ -d "media" ]; then
              sudo tar -czf "$BACKUP_DIR/media_backup_$TIMESTAMP.tar.gz" media/
              echo "Dossier media sauvegardé"
            fi
            
            # Sauvegarder les fichiers statiques si ils existent
            if [ -d "staticfiles" ]; then
              sudo tar -czf "$BACKUP_DIR/staticfiles_backup_$TIMESTAMP.tar.gz" staticfiles/
              echo "Dossier staticfiles sauvegardé"
            fi
            
            # Faire un pull pour mettre à jour le code
            sudo git fetch origin
            sudo git reset --hard origin/main
            
            # Restaurer les fichiers sensibles
            if [ -f "/tmp/livemanager_env_backup" ]; then
              sudo cp /tmp/livemanager_env_backup .env
              sudo rm /tmp/livemanager_env_backup
              echo "Fichier .env restauré"
            fi
            
            # Restaurer les médias
            if [ -f "$BACKUP_DIR/media_backup_$TIMESTAMP.tar.gz" ]; then
              sudo tar -xzf "$BACKUP_DIR/media_backup_$TIMESTAMP.tar.gz" -C .
              echo "Dossier media restauré"
            fi
            
            # Restaurer les fichiers statiques
            if [ -f "$BACKUP_DIR/staticfiles_backup_$TIMESTAMP.tar.gz" ]; then
              sudo tar -xzf "$BACKUP_DIR/staticfiles_backup_$TIMESTAMP.tar.gz" -C .
              echo "Dossier staticfiles restauré"
            fi
            
          else
            echo "Nouveau déploiement - Clonage du repository..."
            
            # Sauvegarder l'ancienne version si elle existe
            if [ "$(ls -A)" ]; then
              sudo tar -czf "$BACKUP_DIR/backup_$TIMESTAMP.tar.gz" -C $PROJECT_DIR .
              echo "Backup créé: backup_$TIMESTAMP.tar.gz"
            fi
            
            # Nettoyer le répertoire
            sudo rm -rf *
            
            # Cloner le nouveau code
            sudo git clone https://github.com/${{ github.repository }}.git .
          fi
          
          # Créer l'environnement virtuel s'il n'existe pas
          if [ ! -d "venv" ]; then
            sudo python3 -m venv venv
            echo "Environnement virtuel créé"
          fi
          
          # Configurer les permissions de l'environnement virtuel
          sudo chown -R $USER:$USER venv
          
          # Activer l'environnement virtuel et installer/mettre à jour les dépendances
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Configurer les variables d'environnement si le fichier n'existe pas
          if [ ! -f ".env" ]; then
            sudo cp .env.example .env
            echo "Fichier .env créé à partir de .env.example"
          fi
          
          # Appliquer les migrations
          python manage.py migrate
          
          # Collecter les fichiers statiques
          python manage.py collectstatic --noinput
          
          # Créer le superuser si il n'existe pas
          echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('admin', 'admin@livemanager.com', 'admin123') if not User.objects.filter(username='admin').exists() else None" | python manage.py shell
          
          # Configurer les permissions
          sudo chown -R www-data:www-data $PROJECT_DIR
          sudo chmod -R 755 $PROJECT_DIR
          
          # Redémarrer les services
          sudo systemctl start livemanager
          sudo systemctl enable livemanager
          
          echo "Déploiement terminé avec succès!"
          
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Déploiement réussi!"
        else
          echo "❌ Déploiement échoué!"
        fi 