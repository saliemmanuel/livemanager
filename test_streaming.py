#!/usr/bin/env python3
"""
Script de test pour la commande FFmpeg de streaming
"""

import os
import subprocess
import time
import sys


def test_ffmpeg_command():
    """Teste la commande FFmpeg de streaming."""
    print("üß™ Test de la commande FFmpeg de streaming...")

    # V√©rifier si FFmpeg est install√©
    try:
        result = subprocess.run(
            ["ffmpeg", "-version"], capture_output=True, text=True, timeout=10
        )
        if result.returncode != 0:
            print("‚ùå FFmpeg n'est pas install√© ou ne fonctionne pas")
            return False
        print("‚úÖ FFmpeg est install√©")
    except FileNotFoundError:
        print("‚ùå FFmpeg n'est pas install√©")
        return False

    # V√©rifier si setsid est disponible (Linux/Unix seulement)
    if not sys.platform.startswith('win'):
        try:
            result = subprocess.run(
                ["setsid", "--help"], capture_output=True, text=True, timeout=5
            )
            print("‚úÖ setsid est disponible")
        except FileNotFoundError:
            print("‚ùå setsid n'est pas disponible")
            return False
    else:
        print("‚úÖ Windows d√©tect√© - setsid non n√©cessaire")

    # Cr√©er un fichier vid√©o de test si n√©cessaire
    test_video = "test_video.mp4"
    if not os.path.exists(test_video):
        print("üìπ Cr√©ation d'un fichier vid√©o de test...")
        create_cmd = [
            "ffmpeg",
            "-f",
            "lavfi",
            "-i",
            "testsrc=duration=5:size=640x360:rate=1",
            "-f",
            "lavfi",
            "-i",
            "sine=frequency=1000:duration=5",
            "-c:v",
            "libx264",
            "-c:a",
            "aac",
            "-y",
            test_video,
        ]

        result = subprocess.run(create_cmd, capture_output=True, text=True, timeout=30)
        if result.returncode != 0:
            print(f"‚ùå Erreur lors de la cr√©ation du fichier de test: {result.stderr}")
            return False
        print("‚úÖ Fichier vid√©o de test cr√©√©")

    # URL de test (remplacer par une vraie cl√© de streaming pour tester)
    test_rtmp_url = "rtmp://a.rtmp.youtube.com/live2/test-key"

    # Commande FFmpeg exacte comme sp√©cifi√©e (sans setsid pour Windows)
    if sys.platform.startswith('win'):
        ffmpeg_cmd = [
            "ffmpeg",
            "-re",  # Lire √† la vitesse r√©elle
            "-stream_loop",
            "-1",  # Boucle infinie
            "-i",
            test_video,  # Fichier d'entr√©e
            "-c:v",
            "libx264",  # Codec vid√©o H.264
            "-preset",
            "ultrafast",  # Preset rapide pour streaming
            "-b:v",
            "500k",  # Bitrate vid√©o 500k
            "-maxrate",
            "800k",  # Bitrate maximum 800k
            "-bufsize",
            "1200k",  # Taille du buffer 1200k
            "-s",
            "640x360",  # R√©solution 640x360
            "-g",
            "60",  # GOP size 60
            "-keyint_min",
            "60",  # Keyframe minimum 60
            "-c:a",
            "aac",  # Codec audio AAC
            "-b:a",
            "96k",  # Bitrate audio 96k
            "-f",
            "flv",  # Format de sortie FLV
            "-reconnect",
            "1",  # Activer la reconnexion
            "-reconnect_streamed",
            "1",  # Reconnexion pour streaming
            "-reconnect_delay_max",
            "2",  # D√©lai max de reconnexion 2s
            test_rtmp_url,  # URL de destination RTMP
        ]
    else:
        # Linux/Unix: utiliser setsid
        ffmpeg_cmd = [
            "setsid",
            "ffmpeg",
            "-re",  # Lire √† la vitesse r√©elle
            "-stream_loop",
            "-1",  # Boucle infinie
            "-i",
            test_video,  # Fichier d'entr√©e
            "-c:v",
            "libx264",  # Codec vid√©o H.264
            "-preset",
            "ultrafast",  # Preset rapide pour streaming
            "-b:v",
            "500k",  # Bitrate vid√©o 500k
            "-maxrate",
            "800k",  # Bitrate maximum 800k
            "-bufsize",
            "1200k",  # Taille du buffer 1200k
            "-s",
            "640x360",  # R√©solution 640x360
            "-g",
            "60",  # GOP size 60
            "-keyint_min",
            "60",  # Keyframe minimum 60
            "-c:a",
            "aac",  # Codec audio AAC
            "-b:a",
            "96k",  # Bitrate audio 96k
            "-f",
            "flv",  # Format de sortie FLV
            "-reconnect",
            "1",  # Activer la reconnexion
            "-reconnect_streamed",
            "1",  # Reconnexion pour streaming
            "-reconnect_delay_max",
            "2",  # D√©lai max de reconnexion 2s
            test_rtmp_url,  # URL de destination RTMP
        ]

    print("\nüîß Commande FFmpeg:")
    print(" ".join(ffmpeg_cmd))

    print("\n‚ö†Ô∏è  ATTENTION: Cette commande va essayer de se connecter √† YouTube!")
    print("Pour un test sans connexion r√©elle, utilisez une URL de test locale.")

    confirm = input("\nVoulez-vous continuer avec un test r√©el ? (y/N): ")
    if confirm.lower() != "y":
        print("Test annul√©")
        return True

    print("\nüöÄ Lancement du test de streaming...")
    print("Le processus va tourner pendant 10 secondes puis s'arr√™ter automatiquement")

    # Lancer le processus
    try:
        if sys.platform.startswith('win'):
            # Windows: utiliser subprocess.Popen avec creationflags
            process = subprocess.Popen(
                ffmpeg_cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NEW_PROCESS_GROUP
            )
        else:
            # Linux/Unix: utiliser subprocess.Popen normal
            process = subprocess.Popen(
                ffmpeg_cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                start_new_session=True  # Cr√©er une nouvelle session
            )

        print(f"‚úÖ Processus FFmpeg d√©marr√© avec PID: {process.pid}")
        print("‚è≥ Attente de 10 secondes...")

        # Attendre 10 secondes
        time.sleep(10)

        # Arr√™ter le processus
        print("üõë Arr√™t du processus...")
        if sys.platform.startswith('win'):
            # Windows: utiliser taskkill
            subprocess.run(
                ["taskkill", "/F", "/PID", str(process.pid)],
                capture_output=True,
                timeout=10
            )
        else:
            # Linux/Unix: utiliser os.kill
            os.kill(process.pid, 15)  # SIGTERM
            time.sleep(2)
            try:
                os.kill(process.pid, 0)  # Test si le processus existe
                os.kill(process.pid, 9)  # SIGKILL si n√©cessaire
            except OSError:
                pass

        print("‚úÖ Test termin√© avec succ√®s!")
        return True

    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False


if __name__ == "__main__":
    test_ffmpeg_command()
